#如果把custom.yaml放到主文件夹，它会覆盖掉同名schema.yaml对应的配置。
#如果能掌握patch方法论的内容，可以使用custom.yaml个性化你的配置，并且不影响使用万象的schema.yaml更随更新。
#因为它没有后者容易更换双拼和辅助码，不利于新用户使用，它被闲置起来了，可以不用管它。
#现在它是小鹤虎辅。


patch:

  schema/dependencies/+: 
    - common  
  schema/dependencies/+: 
    - tiger

  switches:
    - name: ascii_mode
      states: [ 中, 英 ]
    - name: chaifen
      states: [ 拆隐, 拆显 ] 
    - name: charset_filter
      states: [ 小, 大字集 ]
      reset: 0  
    - name: pinyin  #拼音滤镜
      reset: 0
      states: [ 关, 字pīn ]
    - name: ascii_punct  # 中英标点
      states: [ 。, . ]
    - name: tiger-sentence
      states: [关, 虎句]
    - name: tigress
      states: [ 关, 虎词 ]
    - name: tiger
      states: [ 关, 虎单 ]
      reset: 1   
    - name: simple
      states: [ 两码, 原码句 ]
    - name: yin
      states: [ 关, 音码 ]
      reset: 1   
    - name: super_tips
      states: [ off, tips ]
      reset: 1
    - name: tone_display
      states: [ 关, 句pīn ] 
    - name: fuzhu_switch
      states: [ 关, 辅显 ]
    - name: full_shape
      states: [ 半角, 全角 ]
      reset: 0   
    - name: traditionalization
      states: [ 简, 繁 ]
    - name: emoji
      states: [ 🙃, 😄 ]
      reset: 0
    - name: udpf_switch
      states: [ 关, U编]
    - name: chinese_english
      states: [ 关, 翻译 ]
    - name: prediction
      states: [ 关, 预测 ]


  engine/translators:
    - table_translator@custom_phrase     # 自定义短语 custom_phrase.txt
    - script_translator@tiger_sentence
    - predict_translator
    - punct_translator
    - script_translator
    - lua_translator@*shijian            # 时间、日期、星期、农历、节气、时辰等等
    - lua_translator@*unicode            # Unicode
    - lua_translator@*number_translator  # 数字、金额大写
    - lua_translator@*super_calculator   # 计算器
    - table_translator@wanxiang_en          # 英文输入
    - table_translator@cn_en             # 中英混合词汇
    - table_translator@chengyu           # 简码成语
    - table_translator@radical_lookup    # 部件拆字反查
    - table_translator@reverse_stroke    #笔画反查
    - script_translator@user_dict_set
    - script_translator@add_user_dict
    - lua_translator@*force_gc          # 暴力 GC 降低内存
  engine/filters:
    - lua_filter@*common_filter                     #全局字符集过滤
    - lua_filter@*cold_word_drop.filter               
    - lua_filter@*remove_tiger_filter             # 虎码开关
    - lua_filter@*autocap_filter                    # 英文自动大写
    - reverse_lookup_filter@radical_reverse_lookup  # 部件拆字滤镜，放在pro_comment_format前面，进一步被超级注释处理以获得拼音编码+辅助码的提示
    - lua_filter@*super_preedit                     #输入码显示全拼并带上音调
    - simplifier@emoji                              # Emoji
    - simplifier@traditionalize                     # 简繁切换
    - simplifier@mars                               #火星文
    - simplifier@chinese_english                    #中英翻译
    - lua_filter@*search@radical_pinyin             # 部件拆字辅码放在简繁转换之后
    - lua_filter@*search@wanxiang_radical           # 部件拆字辅码放在简繁转换之后
    - simplifier@chaifen #拆分滤镜
    - simplifier@pinyin #拼音滤镜 
    - lua_filter@*super_comment                     #超级注释模块，支持错词提示、辅助码显示，部件组字读音注释，支持个性化配置和关闭相应的功能，详情搜索super_comment进行详细配置
    - lua_filter@*unicode_display #Unicode编码显示
    - uniquifier                                    # 去重
    

  # 主翻译器，拼音
  translator/enable_user_dict: true
  translator/disable_user_dict_for_patterns:
  
  
  recognizer/patterns/+:
    tiger_sentence: '^[A-Za-z]{5}[A-Za-z]*'
  
  
  key_binder/tips_key: "slash"
  
  key_binder/bindings/+:
    - { when: has_menu, accept: semicolon, send: 2 }
  

  # 拼写设定
  speller:
  # table_translator翻译器，支持自动上屏。例如 “zmhu”可以自动上屏“怎么回事”
  #  auto_select: true
  #  auto_select_pattern: ^[a-z]+/|^[a-df-zA-DF-Z]\w{3}|^e\w{4}
    # 如果不想让什么标点直接上屏，可以加在 alphabet，或者编辑标点符号为两个及以上的映射
    alphabet: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA`/
    # initials 定义仅作为始码的按键，排除 ` 让单个的 ` 可以直接上屏
    initials: zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA
    delimiter: " '"  # 第一位<空格>是拼音之间的分隔符；第二位<'>表示可以手动输入单引号来分割拼音。
    algebra:
      - xlit/āáǎàōóǒòēéěèīíǐìūúǔùǖǘǚǜü/aaaaooooeeeeiiiiuuuuvvvvv/
      - xform/ń|ň|ǹ/en/ 
      - xform/^ng(;.*)/eng$1/
      - xform/ńg|ňg|ǹg/eng/
      - derive/^([jqxy])u(;.*)$/$1v$2/
      - derive/^([aoe])([ioun])(;.*)$/$1$1$2$3/
      - xform/^([aoe])(ng)?(;.*)$/$1$1$2$3/
      - xform/^(\w+?)iu(;.*)/$1Ⓠ$2/
      - xform/^(\w+?)ei(;.*)/$1Ⓦ$2/
      - xform/^(\w+?)uan(;.*)/$1Ⓡ$2/
      - xform/^(\w+?)[uv]e(;.*)/$1Ⓣ$2/
      - xform/^(\w+?)un(;.*)/$1Ⓨ$2/
      - xform/^(\w+?)uo(;.*)/$1Ⓞ$2/
      - xform/^(\w+?)ie(;.*)/$1Ⓟ$2/
      - xform/^(\w+?)i?ong(;.*)/$1Ⓢ$2/
      - xform/^(\w+?)ing(;.*)/$1Ⓚ$2/
      - xform/^(\w+?)uai(;.*)/$1Ⓚ$2/
      - xform/^(\w+?)ai(;.*)/$1Ⓓ$2/
      - xform/^(\w+?)eng(;.*)/$1Ⓖ$2/
      - xform/^(\w+?)en(;.*)/$1Ⓕ$2/
      - xform/^(\w+?)[iu]ang(;.*)/$1Ⓛ$2/
      - xform/^(\w+?)ang(;.*)/$1Ⓗ$2/
      - xform/^(\w+?)ian(;.*)/$1Ⓜ$2/
      - xform/^(\w+?)an(;.*)/$1Ⓙ$2/
      - xform/^(\w+?)ou(;.*)/$1Ⓩ$2/
      - xform/^(\w+?)iao(;.*)/$1Ⓝ$2/
      - xform/^(\w+?)[iu]a(;.*)/$1Ⓧ$2/
      - xform/^(\w+?)ao(;.*)/$1Ⓒ$2/
      - xform/^(\w+?)ui(;.*)/$1Ⓥ$2/
      - xform/^(\w+?)in(;.*)/$1Ⓑ$2/
      - xform/^sh/Ⓤ/
      - xform/^ch/Ⓘ/
      - xform/^zh/Ⓥ/
      - xlit/ⓆⓌⓇⓉⓎⓊⒾⓄⓅⓈⒹⒻⒼⒽⒿⓀⓁⓏⓍⒸⓋⒷⓃⓂ/qwrtyuiopsdfghjklzxcvbnm/
        
      - xform|^(.*?);.*?;.*?;.*?;.*?;.*?;(.*?);.*$|$1;$2|
      - derive|^(.+);.*$|$1| # 纯双拼的情况
      - abbrev|^(.+);(\w)(\w).*$|$1$2| # 双拼+一位辅助码的情况
      - derive|^(.+);(\w)(\w).*$|$1[$2| # 双拼+[一位辅助码的情况
      - abbrev|^(.+);(\w)(\w).*$|$1$2$3| # 双拼+2位辅助码的情况
      - derive|^(.+);(\w)(\w).*$|$1$2$3/| # 双拼+2位辅助码+/
      - derive|^(.+);(\w)(\w).*$|$1$2$3o| # 双拼+2位辅助码+o
#分号后面第二组辅助码
      - abbrev/^(.+);.*?,(\w\w).*$/$1$2/
      - derive/^(.+);.*?,(\w)(\w).*$/$1[$2/
      - abbrev/^(.+);.*?,(\w)(\w).*$/$1$2$3/
      - derive|^(.+);.*?,(\w)(\w).*$|$1$2$3/|
      - derive/^(.+);.*?,(\w)(\w).*$/$1$2$3o/
      - erase/^(.+);(.+)$/    # 删除原始编码加速检索
      

  pro_comment_format:           # 超级注释模块，子项配置 true 开启，false 关闭
    candidate_length: 1         # 候选词辅助码提醒的生效长度，0为关闭  但同时清空其它，应当使用上面开关来处理    
    fuzhu_type: tiger             # 用于匹配对应的辅助码注释显示，基于默认词典的可选注释类型有：( moqi, flypy, zrm, jdh, cj, tiger, wubi, hanxin) tone (这个参数特殊，在注释里显示声调，不算辅助码，也填入此处)选择一个填入，之所以单独列出是因为这里有更多的可配置性，而真正的辅助码默认只有8种
    corrector_type: "{comment}"  # 换一种显示类型，比如"({comment})"   
  
  
    # 自定义词典加词(ach引导)
  add_user_dict/prefix: "ach"

  
  # 拆分滤镜
  chaifen:
    opencc_config: hu_cf.json
    option_name: chaifen
    show_in_comment: true 
    comment_format:     
      - "xform/&nbsp;/ /"
    tips: all #如只想给单字加滤镜，可改为 char
  
  
  # ↓拼音滤镜
  pinyin:
    opencc_config: pinyin.json
    option_name: pinyin
    show_in_comment: true #作为注解在后面显示
    comment_format:
      - 'xform/&nbsp;/ /'
      # - "xform/^/ /"
    tips: char
    

  tiger_sentence:
    tag: tiger_sentence  
    dictionary: tiger
    db_class: stabledb
    enable_user_dict: true
    enable_completion: false
    enable_sentence: true
    initial_quality: 3
    comment_format:
      - xform/~[A-Za-z]*//
    

  custom_phrase:
    dictionary: ""
    user_dict: custom_phrase/tiger  
    db_class: stabledb
    enable_completion: false # 补全提示
    enable_sentence: true   
    initial_quality: 3      # custom_phrase 的权重应该比 pinyin 和 melt_eng 大
  
  